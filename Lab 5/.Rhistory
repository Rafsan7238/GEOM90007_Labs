for (i in 2:8) {
lines(2017:2020, data[i, 2:5], type = "o", pch = i, col = i)
}
plot(2017:2020, data[1, 2:5], type = "o", xlab = "Year", ylab = "Number of Births",
main = "Number of Births in Each State of Australia (2017-2020)")
# Add lines for each state
for (i in 2:8) {
lines(2017:2020, data[i, 2:5], type = "o", pch = i, col = i)
}
plot(2017:2020, data[1, 2:5], type = "o", xlab = "Year", ylab = "Number of Births",
main = "Number of Births in Each State of Australia (2017-2020)")
# Add lines for each state
for (i in 2:8) {
lines(2017:2020, data[i, 2:5], type = "o", pch = i, col = i)
}
legend("topright", legend = states, col = 1:8, pch = 1:8, title = "States")
plot(2017:2020, data[1, 2:5], type = "o", xlab = "Year", ylab = "Number of Births",
main = "Number of Births in Each State of Australia (2017-2020)")
# Add lines for each state
for (i in 2:8) {
lines(2017:2020, data[i, 2:5], type = "o", pch = i, col = i)
}
legend("topright", legend = data$Region, col = 1:8, pch = 1:8, title = "States")
plot(2017:2020, data[1, 2:5], type = "o", xlab = "Year", ylab = "Number of Births",
main = "Number of Births in Each State of Australia (2017-2020)")
# Add lines for each state
for (i in 2:8) {
points(2017:2020, data[i, 2:5], type = "o", pch = i, col = i)
lines(2017:2020, data[i, 2:5], type = "o", pch = i, col = i)
}
legend("topright", legend = data$Region, col = 1:8, pch = 1:8, title = "States")
plot(2017:2020, data[1, 2:5], type = "o", xlab = "Year", ylab = "Number of Births",
main = "Number of Births in Each State of Australia (2017-2020)")
# Add lines for each state
for (i in 2:8) {
points(2017:2020, data[i, 2:5], type = "o", pch = i, col = i)
}
legend("topright", legend = data$Region, col = 1:8, pch = 1:8, title = "States")
plot(2017:2020, data[1, 2:5], type = "o", xlab = "Year", ylab = "Number of Births",
main = "Number of Births in Each State of Australia (2017-2020)")
# Add lines for each state
for (i in 2:8) {
points(2017:2020, data[i, 2:5], type = "o", pch = i, col = i)
lines(2017:2020, data[i, 2:5], type = "o", pch = i, col = i)
}
legend("topright", legend = data$Region, col = 1:8, pch = 1:8, title = "States")
plot(2017:2020, data[1, 2:5], type = "o", xlab = "Year", ylab = "Number of Births",
main = "Number of Births in Each State of Australia (2017-2020)")
# Add lines for each state
for (i in 2:8) {
points(2017:2020, data[i, 2:5], pch = i, col = i)
lines(2017:2020, data[i, 2:5], pch = i, col = i)
}
legend("topright", legend = data$Region, col = 1:8, pch = 1:8, title = "States")
plot(2017:2020, data[1, 2:5], type = "l", xlab = "Year", ylab = "Number of Births",
main = "Number of Births in Each State of Australia (2017-2020)")
# Add lines for each state
for (i in 2:8) {
lines(2017:2020, data[i, 2:5], type = "o", pch = i, col = i)
}
legend("topright", legend = data$Region, col = 1:8, pch = 1:8, title = "States")
plot(2017:2020, data[3, 2:5], type = "l", xlab = "Year", ylab = "Number of Births",
main = "Number of Births in Each State of Australia (2017-2020)")
# Add lines for each state
for (i in 2:8) {
lines(2017:2020, data[i, 2:5], type = "o", pch = i, col = i)
}
legend("topright", legend = data$Region, col = 1:8, pch = 1:8, title = "States")
plot(2017:2020, data[4, 2:5], type = "l", xlab = "Year", ylab = "Number of Births",
main = "Number of Births in Each State of Australia (2017-2020)")
# Add lines for each state
for (i in 2:8) {
lines(2017:2020, data[i, 2:5], type = "o", pch = i, col = i)
}
legend("topright", legend = data$Region, col = 1:8, pch = 1:8, title = "States")
plot(2017:2020, data[:, 2:5], type = "l", xlab = "Year", ylab = "Number of Births",
plot(2017:2020, data[, 2:5], type = "l", xlab = "Year", ylab = "Number of Births",
main = "Number of Births in Each State of Australia (2017-2020)")
plot(2017:2020, data[1:8, 2:5], type = "l", xlab = "Year", ylab = "Number of Births",
main = "Number of Births in Each State of Australia (2017-2020)")
plot(2017:2020, data[1, 2:5], type = "l", xlab = "Year", ylab = "Number of Births",
main = "Number of Births in Each State of Australia (2017-2020)")
# Add lines for each state
for (i in 2:8) {
lines(2017:2020, data[i, 2:5], type = "o", pch = i, col = i)
}
legend("topright", legend = data$Region, col = 1:8, pch = 1:8, title = "States")
plot(2017:2020, data[1, 2:5], type = "n", xlab = "Year", ylab = "Number of Births",
main = "Number of Births in Each State of Australia (2017-2020)")
# Add lines for each state
for (i in 2:8) {
lines(2017:2020, data[i, 2:5], type = "o", pch = i, col = i)
}
legend("topright", legend = data$Region, col = 1:8, pch = 1:8, title = "States")
plot(2017:2020, data[1, 2:5], type = "n", xlab = "Year", ylab = "Number of Births",
main = "Number of Births in Each State of Australia (2017-2020)")
# Add lines for each state
for (i in 2:8) {
lines(2017:2020, data[i, 2:5], type = "o", pch = i, col = i)
}
legend("topright", legend = data$Region, col = 1:8, pch = 1:8, title = "States")
plot(2017:2020, data[1, 2:5], type = "n", xlab = "Year", ylab = "Number of Births",
main = "Number of Births in Each State of Australia (2017-2020)")
# Add lines for each state
for (i in 2:8) {
lines(2017:2020, data[i, 2:5], type = "l", pch = i, col = i)
}
legend("topright", legend = data$Region, col = 1:8, pch = 1:8, title = "States")
plot(2017:2020, data[1, 2:5], type = "l", xlab = "Year", ylab = "Number of Births",
main = "Number of Births in Each State of Australia (2017-2020)")
# Add lines for each state
for (i in 2:8) {
lines(2017:2020, data[i, 2:5], type = "o", pch = i, col = i)
}
legend("topright", legend = data$Region, col = 1:8, pch = 1:8, title = "States")
dev.off()
plot(2017:2020, data[1, 2:5], type = "l", xlab = "Year", ylab = "Number of Births",
main = "Number of Births in Each State of Australia (2017-2020)")
# Add lines for each state
for (i in 2:8) {
lines(2017:2020, data[i, 2:5], type = "o", pch = i, col = i)
}
legend("topright", legend = data$Region, col = 1:8, pch = 1:8, title = "States")
plot(2017:2020, data[1, 2:5], type = "l", xlab = "Year", ylab = "Number of Births",
main = "Number of Births in Each State of Australia (2017-2020)")
# Add lines for each state
for (i in 2:8) {
lines(2017:2020, data[i, 2:5], type = "o", pch = i, col = i)
}
legend("topright", legend = data$Region, col = 1:8, pch = 1:8, title = "States")
plot(2017:2020, data[1, 2:5], type = "l", xlab = "Year", ylab = "Number of Births",
main = "Number of Births in Each State of Australia (2017-2020)", ylim = 1:500000)
plot(2017:2020, data[1, 2:5], type = "l", xlab = "Year", ylab = "Number of Births",
main = "Number of Births in Each State of Australia (2017-2020)", ylim = range(c(1:500000)))
# Add lines for each state
for (i in 2:8) {
lines(2017:2020, data[i, 2:5], type = "o", pch = i, col = i)
}
legend("topright", legend = data$Region, col = 1:8, pch = 1:8, title = "States")
plot(2017:2020, data[1, 2:5], type = "l", xlab = "Year", ylab = "Number of Births",
main = "Number of Births in Each State of Australia (2017-2020)", ylim = range(c(1:200000)))
# Add lines for each state
for (i in 2:8) {
lines(2017:2020, data[i, 2:5], type = "o", pch = i, col = i)
}
legend("topright", legend = data$Region, col = 1:8, pch = 1:8, title = "States")
plot(2017:2020, data[1, 2:5], type = "l", xlab = "Year", ylab = "Number of Births",
main = "Number of Births in Each State of Australia (2017-2020)", ylim = range(c(1:150000)))
# Add lines for each state
for (i in 2:8) {
lines(2017:2020, data[i, 2:5], type = "o", pch = i, col = i)
}
legend("topright", legend = data$Region, col = 1:8, pch = 1:8, title = "States")
plot(2017:2020, data[1, 2:5], type = "l", xlab = "Year", ylab = "Number of Births",
main = "Number of Births in Each State of Australia (2017-2020)", ylim = range(c(1:120000)))
# Add lines for each state
for (i in 2:8) {
lines(2017:2020, data[i, 2:5], type = "o", pch = i, col = i)
}
legend("topright", legend = data$Region, col = 1:8, pch = 1:8, title = "States")
plot(2017:2020, data[1, 2:5], type = "l", xlab = "Year", ylab = "Number of Births",
main = "Number of Births in Each State of Australia (2017-2020)", ylim = range(c(1:100000)))
# Add lines for each state
for (i in 2:8) {
lines(2017:2020, data[i, 2:5], type = "o", pch = i, col = i)
}
legend("topright", legend = data$Region, col = 1:8, pch = 1:8, title = "States")
plot(2017:2020, data[1, 2:5], type = "l", xlab = "Year", ylab = "Number of Births",
main = "Number of Births in Each State of Australia (2017-2020)", ylim = range(c(1:110000)))
# Add lines for each state
for (i in 2:8) {
lines(2017:2020, data[i, 2:5], type = "o", pch = i, col = i)
}
legend("topright", legend = data$Region, col = 1:8, pch = 1:8, title = "States")
plot(2017:2020, data[1, 2:5], type = "l", xlab = "Year", ylab = "Number of Births",
main = "Number of Births in Each State of Australia (2017-2020)", xast = "n", ylim = range(c(1:110000)))
# Add lines for each state
for (i in 2:8) {
lines(2017:2020, data[i, 2:5], type = "o", pch = i, col = i)
}
legend("topright", legend = data$Region, col = 1:8, pch = 1:8, title = "States")
plot(2017:2020, data[1, 2:5], type = "l", xlab = "Year", ylab = "Number of Births",
main = "Number of Births in Each State of Australia (2017-2020)", xaxt = "n", ylim = range(c(1:110000)))
# Add lines for each state
for (i in 2:8) {
lines(2017:2020, data[i, 2:5], type = "o", pch = i, col = i)
}
legend("topright", legend = data$Region, col = 1:8, pch = 1:8, title = "States")
plot(2017:2020, data[1, 2:5], type = "l", xlab = "Year", ylab = "Number of Births",
main = "Number of Births in Each State of Australia (2017-2020)", xaxt = "n", ylim = range(c(1:110000)))
# Add lines for each state
for (i in 2:8) {
lines(2017:2020, data[i, 2:5], type = "o", pch = i, col = i)
}
axis(1,at=c("2017", "2018", "2019", "2020"))
legend("topright", legend = data$Region, col = 1:8, pch = 1:8, title = "States")
calc_h <- function(x, n){
val = 0
for (i in 0:n){
val = val + (x ^ i)
}
return (val)
}
# clear the workspace
rm(list=ls())
random.sum <- function(n) {
# sum of n random numbers
x[1:n] <- ceiling(10*runif(n))
cat("x:", x[1:n], "\n")
return(sum(x))
}
x <- rep(100, 10)
show(random.sum(10))
x <- rep(100, 10)
random.sum(10)
x <- rep(100, 10)
random.sum(10)
x <- rep(100, 10)
random.sum(10)
x
# clear the workspace
rm(list=ls())
random.sum <- function(n) {
x <- rep(100, n)
# sum of n random numbers
x[1:n] <- ceiling(10*runif(n))
cat("x:", x[1:n], "\n")
return(sum(x))
}
show(random.sum(5))
res <- ceiling(6*runif(4))
which(res == 6)
res <- ceiling(6*runif(4))
which(res == 8)
res <- ceiling(6*runif(4))
which(res == 6) in 1:4
res <- ceiling(6*runif(4))
if length(which(res == 6)) > 0{
res <- ceiling(6*runif(4))
if (length(which(res == 6))) > 0{
res <- ceiling(6*runif(4))
if (length(which(res == 6)) > 0){
print('You Win!!')
}
res <- ceiling(6*runif(4))
if (length(which(res == 6)) > 0){
print('You Win!!')
}
res <- ceiling(6*runif(4))
if (length(which(res == 6)) > 0){
print('You Win!!')
} else{
print("Sorry, you've lost!")
}
sixes <- function(n = 4){
roll = ceiling(6*runif(n))
if (length(which(roll == 6)) > 0){
return (TRUE)
}
return (FALSE)
}
multiple_rounds(N, n){
multiple_rounds <- function(N, n){
game_res = c()
for (i in 1:N){
game_res[i] = sixes(n)
}
cat('Proportion of Wins: ', (sum(game_res) / N))
}
multiple_rounds(100, 4)
multiple_rounds(100, 4)
multiple_rounds(100, 4)
multiple_rounds(100, 4)
multiple_rounds(100, 4)
multiple_rounds(100, 4)
multiple_rounds(100, 4)
multiple_rounds(1000, 4)
multiple_rounds(1000, 4)
multiple_rounds(1000, 4)
multiple_rounds(1000, 4)
multiple_rounds(1000, 4)
multiple_rounds(10000, 4)
multiple_rounds(10000, 4)
multiple_rounds(10000, 4)
multiple_rounds(10000, 4)
multiple_rounds(10000, 4)
multiple_rounds(10000, 4)
multiple_rounds(10000, 4)
multiple_rounds(10000, 4)
multiple_rounds <- function(N, n){
game_res = c()
for (i in 1:N){
game_res[i] = sixes(n)
}
cat('Proportion of Wins: ', (sum(game_res) / N), '/n')
cat('Theoretical Prob: ', (1 - (5/6)^n))
}
multiple_rounds(10000, 4)
multiple_rounds <- function(N, n){
game_res = c()
for (i in 1:N){
game_res[i] = sixes(n)
}
cat('Proportion of Wins: ', (sum(game_res) / N), '\n')
cat('Theoretical Prob: ', (1 - (5/6)^n))
}
multiple_rounds(10000, 4)
multiple_rounds(10000, 4)
multiple_rounds(10000, 4)
multiple_rounds(10000, 4)
multiple_rounds(10000, 4)
multiple_rounds(10000, 4)
multiple_rounds(1000000, 4)
multiple_rounds(100000, 4)
multiple_rounds(100, 4)
multiple_rounds(100, 4)
multiple_rounds <- function(N, n){
game_res = c()
for (i in 1:N){
game_res[i] = sixes(n)
}
win_prop = sum(game_res) / N
theo_prop = 1 - (5/6)^n
cat('Proportion of Wins: ', win_prop, '\n')
cat('Theoretical Prob: ', theo_prop, '\n')
cat('Absolute Difference: ', abs(win_prop - theo_prop))
}
multiple_rounds(100, 4)
multiple_rounds(100, 4)
multiple_rounds(100, 4)
multiple_rounds(100, 4)
multiple_rounds(100, 4)
multiple_rounds(100000, 4)
multiple_rounds(100000, 4)
multiple_rounds_save <- function(N, n){
game_res = c()
for (i in 1:N){
game_res[i] = sixes(n)
}
fileConn<-file("sixes_sim.txt")
writeLines(game_res, fileConn)
close(fileConn)
}
multiple_rounds_save(100, 4)
multiple_rounds_save <- function(N, n){
game_res = c()
for (i in 1:N){
game_res[i] = sixes(n)
cat(game_res[i], file="sixes_sim.txt", append=TRUE, sep = '\n')
}
}
multiple_rounds_save(100, 4)
file.show('sixes_sim.txt')
res = file.show('sixes_sim.txt')
x = readLines('sixes_sim.txt')
x = readLines('sixes_sim.txt')
print(sum(x) / 100)
x = readLines('sixes_sim.txt')
print(sum(as.integer(x)) / 100)
x = readLines('sixes_sim.txt')
print(sum(as.boolean(x)) / 100)
x = readLines('sixes_sim.txt')
print(sum(as.logical(x)) / 100)
library(maptools)
library(rgdal)
library(ggplot2)
library(mapproj)
library(classInt)
library(RColorBrewer)
library(tidyr)
auMap <- readOGR(dsn="IV-lab-5-data-new/SpatialData", "SpatialData")
auMap <- readOGR(dsn="/Users/rafsanalmamun/Desktop/GEOM90007 Labs/Lab 5/IV-lab-5-data-new/SpatialData", "SpatialData")
auMap <- readOGR(dsn="IV-lab-5-data-new/SpatialData/AusStates", "SpatialData")
getwd()
getwd()
setwd('Desktop/GEOM90007 Labs/Lab 5')
getwd()
auMap <- readOGR(dsn="IV-lab-5-data-new/SpatialData/AusStates", "SpatialData")
auMap <- readOGR(dsn="IV-lab-5-data-new/SpatialData/AusStates.shp", "SpatialData")
auMap <- readOGR(dsn="IV-lab-5-data-new/SpatialData", "SpatialData")
auMap <- readOGR(dsn="/IV-lab-5-data-new/SpatialData", "SpatialData")
auMap <- readOGR(dsn="IV-lab-5-data-new/SpatialData", "SpatialData")
auMap <- readOGR(dsn="IV-lab-5-data-new/SpatialData/AusStates.shp")
class(auMap)
plot(auMap)
auMapDf <- fortify(auMap)
ggplot(auMapDf) + aes(long, lat, group=group) + geom_polygon()
auBirth <- read.csv("IV-lab-5-data-new/Births_summary_with_id.csv", stringsAsFactors = FALSE)
ggplot(auBirth) + aes(x=Region, y=X2017) +
geom_bar(stat="identity")
# Convert data to long format for multiple data series (2017-2020)
auBirth_long <- pivot_longer(auBirth, cols = starts_with("X"), names_to = "Year", values_to = "Births")
# Sort the data by Births in descending order
auBirth_long <- auBirth_long[order(-auBirth_long$Births),]
# Create a custom color palette
my_colors <- c("#1f77b4", "#ff7f0e", "#2ca02c", "#d62728")
# Plot a horizontal bar chart with additional customizations
ggplot(auBirth_long, aes(x = Births, y = Region, fill = Year)) +
geom_bar(stat = "identity", position = "dodge") +
scale_fill_manual(values = my_colors) +
labs(title = "Births by Region in Australia (2017-2020)",
x = "Number of Births",
y = "Region") +
theme_minimal() +
theme(legend.position = "top") +
guides(fill = guide_legend(title = "Year")) +
geom_text(aes(label = Births), hjust = -0.2, color = "black") +
coord_flip()
# Plot a horizontal bar chart with additional customizations
ggplot(auBirth_long, aes(x = Births, y = Region, fill = Year)) +
geom_bar(stat = "identity", position = "dodge") +
scale_fill_manual(values = my_colors) +
labs(title = "Births by Region in Australia (2017-2020)",
x = "Number of Births",
y = "Region") +
theme_minimal() +
theme(legend.position = "top") +
guides(fill = guide_legend(title = "Year"))
auBirth_long_new <- auBirth %>% gather(key=Year, value=Births, -Region, -id)
ggplot(auBirth_long) + aes(x=Year, y=Births, group=id, color=Region) +
geom_line()
ggplot(auBirth_long_new) + aes(x=Year, y=Births, group=id, color=Region) +
geom_line()
# Create a custom color palette
my_colors <- c("#1f77b4", "#ff7f0e", "#2ca02c", "#d62728")
# Plot a line chart with additional customizations
ggplot(auBirth_long_new, aes(x = Year, y = Births, group = id, color = Region)) +
geom_line(size = 1.5) +
scale_color_manual(values = my_colors) +
labs(title = "Birth Trends by Region in Australia (2017-2020)",
x = NULL,  # Remove x-axis label
y = "Number of Births") +
theme_minimal() +
theme(plot.title = element_text(size = 16, face = "bold"),
axis.text = element_text(size = 12),
axis.title = element_text(size = 14),
legend.background = element_rect(fill = "transparent"),  # Remove legend background
legend.box.background = element_rect(color = "black"),  # Add border to legend box
legend.title = element_text(size = 14),
legend.text = element_text(size = 12),
panel.background = element_rect(fill = "#f0f0f0"),  # Set panel background color
panel.grid.major = element_line(color = "white"),  # Customize grid lines
panel.grid.minor = element_line(color = "white")) +
guides(color = guide_legend(override.aes = list(size = 2)))  # Adjust legend symbol size
# Create a custom color palette with 8 colors
my_colors <- c("#1f77b4", "#ff7f0e", "#2ca02c", "#d62728",
"#9467bd", "#8c564b", "#e377c2", "#7f7f7f")
# Plot a line chart with additional customizations
ggplot(auBirth_long_new, aes(x = Year, y = Births, group = id, color = Region)) +
geom_line(linewidth = 1.5) +
scale_color_manual(values = my_colors) +
labs(title = "Birth Trends by Region in Australia (2017-2020)",
x = NULL,  # Remove x-axis label
y = "Number of Births") +
theme_minimal() +
theme(plot.title = element_text(size = 16, face = "bold"),
axis.text = element_text(size = 12),
axis.title = element_text(size = 14),
legend.background = element_rect(fill = "transparent"),  # Remove legend background
legend.box.background = element_rect(color = "black"),  # Add border to legend box
legend.title = element_text(size = 14),
legend.text = element_text(size = 12),
panel.background = element_rect(fill = "#f0f0f0"),  # Set panel background color
panel.grid.major = element_line(color = "white"),  # Customize grid lines
panel.grid.minor = element_line(color = "white")) +
guides(color = guide_legend(override.aes = list(size = 2)))  # Adjust legend symbol size
# Create a custom color palette with 8 colors
my_colors <- c("#1f77b4", "#ff7f0e", "#2ca02c", "#d62728",
"#9467bd", "#8c564b", "#e377c2", "#7f7f7f")
# Plot a line chart with additional customizations
ggplot(auBirth_long_new, aes(x = Year, y = Births, group = id, color = Region)) +
geom_line(linewidth = 1.5) +
scale_color_manual(values = my_colors) +
labs(title = "Birth Trends by Region in Australia (2017-2020)",
x = NULL,  # Remove x-axis label
y = "Number of Births") +
scale_x_discrete(labels = function(x) as.numeric(gsub("X", "", x))) +  # Remove "X" prefix
theme_minimal() +
theme(plot.title = element_text(size = 16, face = "bold"),
axis.text = element_text(size = 12),
axis.title = element_text(size = 14),
legend.background = element_rect(fill = "transparent"),  # Remove legend background
legend.box.background = element_rect(color = "black"),  # Add border to legend box
legend.title = element_text(size = 14),
legend.text = element_text(size = 12),
panel.background = element_rect(fill = "#f0f0f0"),  # Set panel background color
panel.grid.major = element_line(color = "white"),  # Customize grid lines
panel.grid.minor = element_line(color = "white")) +
guides(color = guide_legend(override.aes = list(size = 2)))  # Adjust legend symbol size
# Create a custom color palette with 8 colors
my_colors <- c("#1f77b4", "#ff7f0e", "#2ca02c", "#d62728",
"#9467bd", "#8c564b", "#e377c2", "#7f7f7f")
# Plot a line chart with additional customizations
ggplot(auBirth_long_new, aes(x = Year, y = Births, group = id, color = Region)) +
geom_line(linewidth = 1.5) +
scale_color_manual(values = my_colors) +
labs(title = "Birth Trends by Region in Australia (2017-2020)",
x = "Year",  # Remove x-axis label
y = "Number of Births") +
scale_x_discrete(labels = function(x) as.numeric(gsub("X", "", x))) +  # Remove "X" prefix
theme_minimal() +
theme(plot.title = element_text(size = 16, face = "bold"),
axis.text = element_text(size = 12),
axis.title = element_text(size = 14),
legend.background = element_rect(fill = "transparent"),  # Remove legend background
legend.box.background = element_rect(color = "black"),  # Add border to legend box
legend.title = element_text(size = 14),
legend.text = element_text(size = 12),
panel.background = element_rect(fill = "#f0f0f0"),  # Set panel background color
panel.grid.major = element_line(color = "white"),  # Customize grid lines
panel.grid.minor = element_line(color = "white")) +
guides(color = guide_legend(override.aes = list(size = 2)))  # Adjust legend symbol size
