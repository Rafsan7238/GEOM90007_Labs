C.SSRes <- e_new^2
C.SSReg <- C.SSTotal - C.SSRes
X_new
y <- data$GPA
X_new <- data[, c('SATM', 'SATCR', 'SATW')]
X_new <- cbind(X, X_new)
X_new <- as.matrix(X_new, 100, 7)
X_new
model2 <- lm(GPA ~ HSM + HSS + HSE + SATM + SATCR + SATW, data = data)
model2$coefficients
ybar <- sum(y) / n
C.SSTotal <- sum((y - ybar)^2)
b_new <- solve(t(X_new)%*%X_new, t(X_new)%*%y)
e_new <- y - X_new%*%b_new
C.SSRes <- e_new^2
C.SSReg <- C.SSTotal - C.SSRes
F_stat_new <- (C.SSReg / 7) / (C.SSRes / (100-7))
pf(F_stat_new, 7, 100-7, lower.tail = FALSE)
y <- data$GPA
X_new <- data[, c('SATM', 'SATCR', 'SATW')]
X_new <- cbind(X, X_new)
X_new <- as.matrix(X_new, 100, 7)
model2 <- lm(GPA ~ HSM + HSS + HSE + SATM + SATCR + SATW, data = data)
model2$coefficients
X_new
null <- lm(GPA~1)
null <- lm(GPA~1, data = data)
anova(null, model2)
null <- lm(GPA~0, data = data)
anova(null, model2)
anova(model2)
anova(null, model2)
model3 <- step(model2, scope = ~., steps = 1)
model4 <- step(model3, scope~.+SATW, steps = 1)
model3 <- step(model2, scope = ~.)
final_model <- step(model2, scope = ~.)
install.packages("car")
library(car)
dst <- c(0)
C <- matrix(c(1, 0, -1), 1, 3)
linearHypothesis(final_model, C, dst)
dst <- c(0)
C <- matrix(c(0, 1, 0, -1), 1, 4)
linearHypothesis(final_model, C, dst)
X
modelx <-lm(GPA ~ HSM + HSE)
modelx <-lm(GPA ~ HSM + HSE, data = data)
anova(modelx, model)
library(car)
xyz <- c(0)
ABC <- matrix(c(0, 0, 1, 0), 100, 4)
linearHypothesis(model, ABC, xyz)
xyz <- c(0)
ABC <- matrix(c(0, 0, 1, 0), 1, 4)
linearHypothesis(model, ABC, xyz)
data <- read.csv('gpa.csv')
y <- data$GPA
X <- data[, c('HSM', 'HSS', 'HSE')]
X <- cbind(rep(1, 100), X)
X <- as.matrix(X, 100, 4)
(b <- solve(t(X)%*%X, t(X)%*%y))
n <- 100
p <- 4
e <- y - X%*%b
(s2 <- sum(e^2)/(n-p))
model <- lm(GPA ~ HSM + HSS + HSE, data = data)
model$coefficients
H <- X %*% solve(t(X) %*% X) %*% t(X)
(leverage15 <- H[15, 15])
(sres15 <- e[15] / sqrt(s2 * (1 - leverage15)))
(cook15 <- (1 / 4) * (sres15 ^ 2) * (leverage15 / (1 - leverage15)))
new_student <- list(HSM = 8, HSS = 9, HSE = 7)
(predicted_gpa <- predict(model, new_student))
(s <- sqrt(s2))
xst <- c(1, 8, 9, 7)
(ta <- qt(0.995, df=n-p))
ci_low <- xst%*%b - ta*s*sqrt(t(xst)%*%solve(t(X)%*%X)%*%xst)
ci_high <- xst%*%b + ta*s*sqrt(t(xst)%*%solve(t(X)%*%X)%*%xst)
cat(' lower bound: ', ci_low, '\n', 'upper bound: ', ci_high)
predict(model, new_student, interval = "confidence", level = 0.99)
(tb <- qt(0.95, df=n-p))
pi_low <- xst%*%b - tb*s*sqrt(1+t(xst)%*%solve(t(X)%*%X)%*%xst)
pi_high <- xst%*%b + tb*s*sqrt(1+t(xst)%*%solve(t(X)%*%X)%*%xst)
cat(' lower bound: ', pi_low, '\n', 'upper bound: ', pi_high)
predict(model, new_student, interval = "prediction", level = 0.90)
SSTotal <- sum(y^2)
SSRes <- sum(e^2)
SSReg <- SSTotal - SSRes
X2 <- X[,-3]
(Rg2 <- t(y) %*% X2 %*% solve(t(X2) %*% X2) %*% t(X2) %*% y)
Rg1g2 <- SSReg - Rg2
r <- 1
(Fstat <- (Rg1g2 / r) / (SSRes / (n-p)))
pf(Fstat, r, n-p, lower.tail = FALSE)
pt(sqrt(Fstat), n-p, lower.tail = FALSE)*2
y <- data$GPA
X_new <- data[, c('SATM', 'SATCR', 'SATW')]
X_new <- cbind(X, X_new)
X_new <- as.matrix(X_new, 100, 7)
model2 <- lm(GPA ~ HSM + HSS + HSE + SATM + SATCR + SATW, data = data)
model2$coefficients
null <- lm(GPA~0, data = data)
anova(null, model2)
final_model <- step(model2, scope = ~.)
dst <- c(0)
C <- matrix(c(0, 1, 0, -1), 1, 4)
linearHypothesis(final_model, C, dst)
library(car)
data <- read.csv('gpa.csv')
y <- data$GPA
X <- data[, c('HSM', 'HSS', 'HSE')]
X <- cbind(rep(1, 100), X)
X <- as.matrix(X, 100, 4)
(b <- solve(t(X)%*%X, t(X)%*%y))
n <- 100
p <- 4
e <- y - X%*%b
(s2 <- sum(e^2)/(n-p))
model <- lm(GPA ~ HSM + HSS + HSE, data = data)
model$coefficients
H <- X %*% solve(t(X) %*% X) %*% t(X)
(leverage15 <- H[15, 15])
(sres15 <- e[15] / sqrt(s2 * (1 - leverage15)))
(cook15 <- (1 / 4) * (sres15 ^ 2) * (leverage15 / (1 - leverage15)))
new_student <- list(HSM = 8, HSS = 9, HSE = 7)
(predicted_gpa <- predict(model, new_student))
(s <- sqrt(s2))
xst <- c(1, 8, 9, 7)
(ta <- qt(0.995, df=n-p))
ci_low <- xst%*%b - ta*s*sqrt(t(xst)%*%solve(t(X)%*%X)%*%xst)
ci_high <- xst%*%b + ta*s*sqrt(t(xst)%*%solve(t(X)%*%X)%*%xst)
cat(' lower bound: ', ci_low, '\n', 'upper bound: ', ci_high)
predict(model, new_student, interval = "confidence", level = 0.99)
(tb <- qt(0.95, df=n-p))
pi_low <- xst%*%b - tb*s*sqrt(1+t(xst)%*%solve(t(X)%*%X)%*%xst)
pi_high <- xst%*%b + tb*s*sqrt(1+t(xst)%*%solve(t(X)%*%X)%*%xst)
cat(' lower bound: ', pi_low, '\n', 'upper bound: ', pi_high)
predict(model, new_student, interval = "prediction", level = 0.90)
SSTotal <- sum(y^2)
SSRes <- sum(e^2)
SSReg <- SSTotal - SSRes
X2 <- X[,-3]
(Rg2 <- t(y) %*% X2 %*% solve(t(X2) %*% X2) %*% t(X2) %*% y)
Rg1g2 <- SSReg - Rg2
r <- 1
(Fstat <- (Rg1g2 / r) / (SSRes / (n-p)))
pf(Fstat, r, n-p, lower.tail = FALSE)
pt(sqrt(Fstat), n-p, lower.tail = FALSE)*2
y <- data$GPA
X_new <- data[, c('SATM', 'SATCR', 'SATW')]
X_new <- cbind(X, X_new)
X_new <- as.matrix(X_new, 100, 7)
model2 <- lm(GPA ~ HSM + HSS + HSE + SATM + SATCR + SATW, data = data)
model2$coefficients
null <- lm(GPA~0, data = data)
anova(null, model2)
final_model <- step(model2, scope = ~.)
dst <- c(0)
C <- matrix(c(0, 1, 0, -1), 1, 4)
linearHypothesis(final_model, C, dst)
install.packages("shiny")
library(shiny)
runApp('Desktop/GEOM90007 Labs/Lab 6/Lab 6.R')
runApp('Desktop/GEOM90007 Labs/Lab 6/Lab 6.R')
runApp('Desktop/GEOM90007 Labs/Lab 6/Lab 6.R')
runApp('Desktop/GEOM90007 Labs/Lab 6/Lab 6.R')
runApp('Desktop/GEOM90007 Labs/Lab 6/Lab 6.R')
library(tidyr)
runApp('Desktop/GEOM90007 Labs/Lab 6/Lab 6.R')
auBirth_long
auBirth_long$Year <- gsub("X", "", auBirth_long$Year)
auBirth_long$Year
auBirth_long
runApp('Desktop/GEOM90007 Labs/Lab 6/Lab 6.R')
auBirth_long <- auBirth_long[order(auBirth_long$Region),]
auBirth_long
runApp('Desktop/GEOM90007 Labs/Lab 6/Lab 6.R')
library(ggplot2)
runApp('Desktop/GEOM90007 Labs/Lab 6/Lab 6.R')
runApp('Desktop/GEOM90007 Labs/Lab 6/Lab 6.R')
runApp('Desktop/GEOM90007 Labs/Lab 6/Lab 6.R')
runApp('Desktop/GEOM90007 Labs/Lab 6/Lab 6.R')
runApp('Desktop/GEOM90007 Labs/Lab 6/Lab 6.R')
runApp('Desktop/GEOM90007 Labs/Lab 6/Lab 6.R')
runApp('Desktop/GEOM90007 Labs/Lab 6/Lab 6.R')
runApp('Desktop/GEOM90007 Labs/Lab 6/Lab 6.R')
runApp('Desktop/GEOM90007 Labs/Lab 6/Lab 6.R')
runApp('Desktop/GEOM90007 Labs/Lab 6/Lab 6.R')
runApp('Desktop/GEOM90007 Labs/Lab 6/Lab 6.R')
runApp('Desktop/GEOM90007 Labs/Lab 6/Lab 6.R')
auBirth <- auBirth[order(auBirth$Region),]
auBirth
runApp('Desktop/GEOM90007 Labs/Lab 6/Lab 6.R')
runApp('Desktop/GEOM90007 Labs/Lab 6/Lab 6.R')
runApp('Desktop/GEOM90007 Labs/Lab 6/Lab 6.R')
runApp('Desktop/GEOM90007 Labs/Lab 6/Lab 6.R')
runApp('Desktop/GEOM90007 Labs/Lab 6/Lab 6.R')
runApp('Desktop/GEOM90007 Labs/Lab 6/Lab 6.R')
runApp('Desktop/GEOM90007 Labs/Lab 6/Lab 6.R')
runApp('Desktop/GEOM90007 Labs/Lab 6/Lab 6.R')
runApp('Desktop/GEOM90007 Labs/Lab 6/Lab 6.R')
runApp('Desktop/GEOM90007 Labs/Lab 6/Lab 6.R')
library(stringr)
runApp('Desktop/GEOM90007 Labs/Lab 6/Lab 6.R')
runApp('Desktop/GEOM90007 Labs/Lab 6/Lab 6.R')
runApp('Desktop/GEOM90007 Labs/Lab 6/Lab 6.R')
runApp('Desktop/GEOM90007 Labs/Lab 6/Lab 6.R')
library(shiny); runApp('Desktop/GEOM90007 Labs/Lab 6/Lab 6.R')
library(ggplot2)
library(stringr)
runApp('Desktop/GEOM90007 Labs/Lab 6/Lab 6.R')
runApp('Desktop/GEOM90007 Labs/Lab 6/Lab 6.R')
runApp('Desktop/GEOM90007 Labs/Lab 6/Lab 6.R')
runApp('Desktop/GEOM90007 Labs/Lab 6/Lab 6.R')
runApp('Desktop/GEOM90007 Labs/Lab 6/Lab 6.R')
runApp('Desktop/GEOM90007 Labs/Lab 6/Lab 6.R')
runApp('Desktop/GEOM90007 Labs/Lab 6/Lab 6.R')
library(car)
data <- read.csv('gpa.csv')
y <- data$GPA
X <- data[, c('HSM', 'HSS', 'HSE')]
X <- cbind(rep(1, 100), X)
X <- as.matrix(X, 100, 4)
(b <- solve(t(X)%*%X, t(X)%*%y))
n <- 100
p <- 4
e <- y - X%*%b
(s2 <- sum(e^2)/(n-p))
model <- lm(GPA ~ HSM + HSS + HSE, data = data)
model$coefficients
H <- X %*% solve(t(X) %*% X) %*% t(X)
(leverage15 <- H[15, 15])
(sres15 <- e[15] / sqrt(s2 * (1 - leverage15)))
(cook15 <- (1 / 4) * (sres15 ^ 2) * (leverage15 / (1 - leverage15)))
new_student <- list(HSM = 8, HSS = 9, HSE = 7)
(predicted_gpa <- predict(model, new_student))
(s <- sqrt(s2))
xst <- c(1, 8, 9, 7)
(ta <- qt(0.995, df=n-p))
ci_low <- xst%*%b - ta*s*sqrt(t(xst)%*%solve(t(X)%*%X)%*%xst)
ci_high <- xst%*%b + ta*s*sqrt(t(xst)%*%solve(t(X)%*%X)%*%xst)
cat(' lower bound: ', ci_low, '\n', 'upper bound: ', ci_high)
predict(model, new_student, interval = "confidence", level = 0.99)
(tb <- qt(0.95, df=n-p))
pi_low <- xst%*%b - tb*s*sqrt(1+t(xst)%*%solve(t(X)%*%X)%*%xst)
pi_high <- xst%*%b + tb*s*sqrt(1+t(xst)%*%solve(t(X)%*%X)%*%xst)
cat(' lower bound: ', pi_low, '\n', 'upper bound: ', pi_high)
predict(model, new_student, interval = "prediction", level = 0.90)
SSTotal <- sum(y^2)
SSRes <- sum(e^2)
SSReg <- SSTotal - SSRes
X2 <- X[,-3]
(Rg2 <- t(y) %*% X2 %*% solve(t(X2) %*% X2) %*% t(X2) %*% y)
Rg1g2 <- SSReg - Rg2
r <- 1
(Fstat <- (Rg1g2 / r) / (SSRes / (n-p)))
pf(Fstat, r, n-p, lower.tail = FALSE)
pt(sqrt(Fstat), n-p, lower.tail = FALSE)*2
y <- data$GPA
X_new <- data[, c('SATM', 'SATCR', 'SATW')]
X_new <- cbind(X, X_new)
X_new <- as.matrix(X_new, 100, 7)
model2 <- lm(GPA ~ HSM + HSS + HSE + SATM + SATCR + SATW, data = data)
model2$coefficients
null <- lm(GPA~0, data = data)
anova(null, model2)
final_model <- step(model2, scope = ~.)
dst <- c(0)
C <- matrix(c(0, 1, 0, -1), 1, 4)
linearHypothesis(final_model, C, dst)
summary(model2)
null <- lm(GPA~1, data = data)
anova(null, model2)
null <- lm(GPA~0, data = data)
anova(null, model2)
null <- lm(GPA~1, data = data)
anova(null, model2)
summary(model2)
data <- read.csv('gpa.csv')
y <- data$GPA
X <- data[, c('HSM', 'HSS', 'HSE')]
X <- cbind(rep(1, 100), X)
X <- as.matrix(X, 100, 4)
(b <- solve(t(X)%*%X, t(X)%*%y))
n <- 100
p <- 4
e <- y - X%*%b
(s2 <- sum(e^2)/(n-p))
model <- lm(GPA ~ HSM + HSS + HSE, data = data)
model$coefficients
H <- X %*% solve(t(X) %*% X) %*% t(X)
(leverage15 <- H[15, 15])
(sres15 <- e[15] / sqrt(s2 * (1 - leverage15)))
(cook15 <- (1 / 4) * (sres15 ^ 2) * (leverage15 / (1 - leverage15)))
new_student <- list(HSM = 8, HSS = 9, HSE = 7)
(predicted_gpa <- predict(model, new_student))
(s <- sqrt(s2))
xst <- c(1, 8, 9, 7)
(ta <- qt(0.995, df=n-p))
ci_low <- xst%*%b - ta*s*sqrt(t(xst)%*%solve(t(X)%*%X)%*%xst)
ci_high <- xst%*%b + ta*s*sqrt(t(xst)%*%solve(t(X)%*%X)%*%xst)
cat(' lower bound: ', ci_low, '\n', 'upper bound: ', ci_high)
predict(model, new_student, interval = "confidence", level = 0.99)
(tb <- qt(0.95, df=n-p))
pi_low <- xst%*%b - tb*s*sqrt(1+t(xst)%*%solve(t(X)%*%X)%*%xst)
pi_high <- xst%*%b + tb*s*sqrt(1+t(xst)%*%solve(t(X)%*%X)%*%xst)
cat(' lower bound: ', pi_low, '\n', 'upper bound: ', pi_high)
predict(model, new_student, interval = "prediction", level = 0.90)
SSTotal <- sum(y^2)
SSRes <- sum(e^2)
SSReg <- SSTotal - SSRes
X2 <- X[,-3]
(Rg2 <- t(y) %*% X2 %*% solve(t(X2) %*% X2) %*% t(X2) %*% y)
Rg1g2 <- SSReg - Rg2
r <- 1
(Fstat <- (Rg1g2 / r) / (SSRes / (n-p)))
pf(Fstat, r, n-p, lower.tail = FALSE)
pt(sqrt(Fstat), n-p, lower.tail = FALSE)*2
y <- data$GPA
X_new <- data[, c('SATM', 'SATCR', 'SATW')]
X_new <- cbind(X, X_new)
X_new <- as.matrix(X_new, 100, 7)
model2 <- lm(GPA ~ HSM + HSS + HSE + SATM + SATCR + SATW, data = data)
model2$coefficients
null <- lm(GPA~1, data = data)
anova(null, model2)
final_model <- step(model2, scope = ~.)
dst <- c(0)
C <- matrix(c(0, 1, 0, -1), 1, 4)
linearHypothesis(final_model, C, dst)
install.packages("ggiraph")
library(ggiraph)
library(shiny); runApp('Desktop/GEOM90007 Labs/Lab 6/Lab 6.R')
detach("package:ggiraph", unload = TRUE)
library(ggplot2)
library(tidyr)
library(stringr)
runApp('Desktop/GEOM90007 Labs/Lab 6/Lab 6.R')
runApp('Desktop/GEOM90007 Labs/Lab 6/Lab 6.R')
runApp('Desktop/GEOM90007 Labs/Lab 6/Lab 6.R')
runApp('Desktop/GEOM90007 Labs/Lab 6/Lab 6.R')
runApp('Desktop/GEOM90007 Labs/Lab 6/Lab 6.R')
runApp('Desktop/GEOM90007 Labs/Lab 6/Lab 6.R')
runApp('Desktop/GEOM90007 Labs/Lab 6/Lab 6.R')
auBirth_long
auBirth_long$Region
auBirth_long$Region.unique
runApp('Desktop/GEOM90007 Labs/Lab 6/Lab 6.R')
runApp('Desktop/GEOM90007 Labs/Lab 6/Lab 6.R')
data <- read.csv('ufc.csv')
three_tall <- data[-order(data$height.m), 'species'][1:3]
three_tall
data <- read.csv('ufc.csv')
data
three_tall <- data[-order(data$height.m), 'species']
three_tall
three_tall <- data[order(data$height.m), 'species']
three_tall
three_tall <- data[order(data$height.m), 'species'][1:3]
three_tall
three_tall <- data[order(data$height.m, decreasing = TRUE), 'species'][1:3]
three_tall
three_tall <- data[order(data$height.m, decreasing = TRUE)][1:3]
three_tall <- data[order(data$height.m, decreasing = TRUE),][1:3]
three_tall
three_tall <- data[order(data$height.m, decreasing = TRUE), 'height'][1:3]
three_tall
three_tall <- data[order(data$height.m, decreasing = TRUE), 'height.m'][1:3]
three_tall
three_tall <- data[order(data$height.m, decreasing = TRUE), 'species'][1:3]
three_tall
five_fat <- data[order(data$dbh.cm, decreasing = TRUE), 'species'][1:5]
five_fat
five_fat <- data[order(data$dbh.cm, decreasing = TRUE), 'species'][1:5]
five_fat
mean_diam_species <- aggregate(data, by=species, mean)
mean_diam_species <- aggregate(data, by='species', mean)
mean_diam_species <- aggregate(data, by=list('species'), mean)
mean_diam_species <- aggregate(data, by=list(species), mean)
mean_diam_species <- aggregate(data, list('species'), mean)
mean_diam_species <- aggregate(data$dbh.cm, list('species'), mean)
mean_diam_species <- aggregate(data$dbh.cm, list(data$species), mean)
mean_diam_species <- aggregate(data$dbh.cm, list(data$species), mean)
mean_diam_species
mean_diam_species <- aggregate(data$dbh.cm, list(data$species), mean)
mean_diam_species
third_quartile <- function(x) quantile(x, probs = 0.75)
third_quartile_diameters <- aggregate(data$dbh.cm, list(data$species), third_quartile)
third_quartile_diameters
largest_third_quartile_species <- third_quartile_diameters[order(-third_quartile_diameters$dbh.cm), "species"][1:2]
third_quartile <- function(x) quantile(x, probs = 0.75)
third_quartile_diameters <- order(aggregate(data$dbh.cm, list(data$species), third_quartile), decreasing = TRUE)[1:2]
third_quartile_diameters
third_quartile <- function(x) quantile(x, probs = 0.75)
third_quartile_diameters <- aggregate(data$dbh.cm, list(data$species), third_quartile)
third_quartile_diameters
third_quartile <- function(x) quantile(x, probs = 0.75)
third_quartile_diameters <- aggregate(data$dbh.cm, list(data$species), third_quartile)
names(third_quartile_diameters) <- c('species', 'third_quartile diam')
third_quartile_diameters
largest_third_quartile_species <- third_quartile_diameters[order(third_quartile_diameters$`third_quartile diam`, decreasing = TRUE), "species"][1:2]
largest_third_quartile_species
names(mean_diam_species) <- c('species', 'mean_diameter')
mean_diam_species
fattest <- mean_diam_species[order(mean_diam_species$mean_diameter, decreasing = TRUE), 'species'][1]
fattest
subset <- data[data$species == fattest]
subset <- data[data$species == fattest, ]
subset
tallest_identity <- subset[order(subset$height.m, decreasing = TRUE), 'tree'][1]
tallest_identity
tallest_identity <- subset[order(subset$height.m, decreasing = TRUE), 'tree'][1]
tallest_identity
tallest_identity <- subset[order(subset$height.m, decreasing = TRUE), ][1]
tallest_identity
tallest_identity <- subset[order(subset$height.m, decreasing = TRUE)][1]
tallest_identity <- subset[order(subset$height.m, decreasing = TRUE), ['plot', 'tree']][1]
tallest_identity <- subset[order(subset$height.m, decreasing = TRUE), 'plot':'tree'][1]
tallest_identity <- subset[order(subset$height.m, decreasing = TRUE), ]
tallest_identity
tallest_identity <- subset[order(subset$height.m, decreasing = TRUE), ][1,]
tallest_identity
mammals <- read.csv("sleep.csv")
mammals <- read.csv("sleep.csv")
mammals <- read.csv("sleep.csv")
mammals
plot(mammals$BodyWt, mammals$BrainWt,
xlab = "Body Weight (kg)", ylab = "Brain Weight (g)",
main = "Brain Weight vs. Body Weight", pch = 19)
model <- lm(BrainWt ~ BodyWt, data = mammals)
summary(model)
# Plot the diagnostics plots
par(mfrow = c(2, 2)) # Set up a 2x2 grid for plots
plot(model) # Residuals vs Fitted, Normal Q-Q, Scale-Location, Residuals vs Leverage
# Reset the plot layout
par(mfrow = c(1, 1))
# Plot the diagnostics plots
par(mfrow = c(2, 2)) # Set up a 2x2 grid for plots
plot(model) # Residuals vs Fitted, Normal Q-Q, Scale-Location, Residuals vs Leverage
# Reset the plot layout
par(mfrow = c(1, 1))
mammals$BodyWt <- log(mammals$BodyWt)
mammals$BrainWt <- log(mammals$BrainWt)
mammals$BodyWt <- log(mammals$BodyWt)
mammals$BrainWt <- log(mammals$BrainWt)
mammals <- read.csv("sleep.csv")
mammals
mammals$BodyWt <- log(mammals$BodyWt)
mammals$BrainWt <- log(mammals$BrainWt)
model2 <- lm(BrainWt ~ BodyWt, data = mammals)
summary(model)
mammals$BodyWt
plot(mammals$BodyWt, mammals$BrainWt,
xlab = "Log Body Weight (kg)", ylab = "Log Brain Weight (g)",
main = "Brain Weight vs. Body Weight", pch = 19)
plot(mammals$BodyWt, mammals$BrainWt,
xlab = "Log Body Weight (kg)", ylab = "Log Brain Weight (g)",
main = "Brain Weight vs. Body Weight", pch = 19)
abline(a = coef(model2)[1], b = coef(model2)[2], col = "blue", lwd = 2)
plot(mammals$BodyWt, mammals$BrainWt,
xlab = "Log Body Weight (kg)", ylab = "Log Brain Weight (g)",
main = "Brain Weight vs. Body Weight", pch = 19)
abline(model2$coefficients, col = "blue", lwd = 2)
plot(mammals$BodyWt, mammals$BrainWt,
xlab = "Log Body Weight (kg)", ylab = "Log Brain Weight (g)",
main = "Brain Weight vs. Body Weight", pch = 19)
abline(model2$coefficients, col = "blue", lwd = 2)
# Plot the diagnostics plots
par(mfrow = c(2, 2)) # Set up a 2x2 grid for plots
plot(model2) # Residuals vs Fitted, Normal Q-Q, Scale-Location, Residuals vs Leverage
# Reset the plot layout
par(mfrow = c(1, 1))
# Plot the diagnostics plots
par(mfrow = c(2, 2)) # Set up a 2x2 grid for plots
plot(model2) # Residuals vs Fitted, Normal Q-Q, Scale-Location, Residuals vs Leverage
# Reset the plot layout
par(mfrow = c(1, 1))
predict(model2, list(bodyWt = log(50)), interval = "confidence", level = 0.95)
predict(model2, list(bodyWt = log(50)), interval = "confidence", level = 0.95)
predict(model2, list(BodyWt = log(50)), interval = "confidence", level = 0.95)
predict(model2, list(BodyWt = log(50)), interval = "prediction", level = 0.95)
null <- lm(mammals$BrainWt ~ 0)
null2 <- lm(mammals$BrainWt ~ 1)
null3 <- lm(mammals$BrainWt ~ 0 + mammals$BodyWt)
null4 <- lm(mammals$BrainWt ~ 0, offset = (2,1))
null <- lm(mammals$BrainWt ~ 0)
null2 <- lm(mammals$BrainWt ~ 1)
null3 <- lm(mammals$BrainWt ~ 0 + mammals$BodyWt)
null4 <- lm(mammals$BrainWt ~ 0, offset = c(2,1))
null <- lm(mammals$BrainWt ~ 0)
null2 <- lm(mammals$BrainWt ~ 1)
null3 <- lm(mammals$BrainWt ~ 0 + mammals$BodyWt)
anova(null, null3, null2, model2)
null <- lm(BrainWt ~ 0, data = mammals)
null2 <- lm(BrainWt ~ 1, data = mammals)
null3 <- lm(BrainWt ~ 0 + BodyWt, data=mammals)
anova(null, null3, null2, model2)
library(shiny); runApp('Desktop/GEOM90007 Labs/Lab 7/Lab 7.R')
runApp('Desktop/GEOM90007 Labs/Lab 7/Lab 7.R')
hosp_data
hosp_data <- read.csv('Hospitals in Australia with childbirth stats-1.csv')
getwd()
setwd('/Users/rafsanalmamun/Desktop/GEOM90007 Labs/Lab 7')
hosp_data <- read.csv('Hospitals in Australia with childbirth stats-1.csv')
runApp('Lab 7.R')
hosp_data
runApp('Lab 7.R')
runApp('Lab 7.R')
hosp_data$State
runApp('Lab 7.R')
names(hosp_data)
runApp('Lab 7.R')
